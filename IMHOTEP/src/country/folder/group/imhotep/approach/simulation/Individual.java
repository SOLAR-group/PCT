package country.folder.group.imhotep.approach.simulation;

public abstract class Individual
{
  /////////////////////////////////////////////////////////////////////////////
  
  private double  mFitnessValue             = 0.0;
  private boolean mIsValid                  = true;
  private boolean mIsAlternativeFitnessUsed = false;
  private boolean mIsFitnessCalculated      = false;
  
  /////////////////////////////////////////////////////////////////////////////

  public final double GetFitnessValue()
  {
    return mFitnessValue;
  }
  
  /////////////////////////////////////////////////////////////////////////////

  public final void UpdateFitnessValue()
  {
    mFitnessValue = CalculateFitnessValue();
  }
  
  /////////////////////////////////////////////////////////////////////////////

  public final boolean IsValid()
  {
    return mIsValid;
  }
  
  /////////////////////////////////////////////////////////////////////////////

  public final void SetAsInvalid()
  {
    if ( IsValid() ) {
      mIsValid = false;
      TinyEvo.IncreasePersistentInvalidCount();
    }
  }
  
  /////////////////////////////////////////////////////////////////////////////

  public final void SetAlternativeFitnessUsed( boolean isAlternativeFitnessUsed )
  {
    mIsAlternativeFitnessUsed = isAlternativeFitnessUsed;
  }
  
  /////////////////////////////////////////////////////////////////////////////

  public final boolean IsAlternativeFitnessUsed()
  {
    return mIsAlternativeFitnessUsed;
  }
  
  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////
  
  public abstract <T> T GetCustomValue( String valueName, Class<T> classReturned );
  
  /////////////////////////////////////////////////////////////////////////////
  
  public abstract String GetContentAsString();
  
  /////////////////////////////////////////////////////////////////////////////
  
  public abstract String GetDescriptionString();
  
  /////////////////////////////////////////////////////////////////////////////
  
  public abstract Individual CrossOver( Individual mate );
  
  /////////////////////////////////////////////////////////////////////////////

  public abstract void Mutate();
  
  /////////////////////////////////////////////////////////////////////////////

  public abstract double CalculateFitnessAndQualityIndicatorsAndReturnFitness();
  
  /////////////////////////////////////////////////////////////////////////////

  public abstract double CalculateFitnessAlternative();
  
  /////////////////////////////////////////////////////////////////////////////

  public final double CalculateFitnessValue()
  {
    double fitnessValue = 0.0;
    if ( mIsFitnessCalculated ) {
    	fitnessValue = GetFitnessValue();
    }
    else
    {
      fitnessValue = CalculateFitnessAndQualityIndicatorsAndReturnFitness();
      if ( IsAlternativeFitnessUsed() ) {
        fitnessValue = CalculateFitnessAlternative();
      }
      mIsFitnessCalculated = true;
    }
    return fitnessValue;
  }
  
  /////////////////////////////////////////////////////////////////////////////
}
